-----------------------------------------------------------------------------------------------------------------------
-- Procedure:	Synch.usp_CMHCClientRecordedServices
-- Author:		Sumana Sangapu
-- Date:		07/09/2016
--
-- Purpose:		Generate Client Recorded Services data for CMHC
--
-- Notes:		n/a (or any additional notes)
--
-- Depends:		n/a (or any dependencies such as other procs or functions)
--
-- REVISION HISTORY ---------------------------------------------------------------------------------------------------
-- 07/09/2016	Sumana Sangapu		Initial creation
-- 08/08/2016	Sumana Sangapu		Assign MRN based on ContactType and filter services that are complete (signed)
-- 08/19/2016	Sumana Sangapu		Fix for ProjectCode not showingup
-- 08/29/2016	Sumana Sangapu		Return Recordedsevices for each of the Co-provider(s)
-- 09/14/2016	Sumana Sangapu		Insert NULL as ErrorMessage
-- 10/05/2016	Sumana Sangapu		Corrected the inactive co-providers issue.
-- 10/15/2016	Sumana Sangapu		Fix for Benefits Assistance CMHCCode and CMHCDescription
-- 10/27/2016	Sumana Sangapu		Fix for Crisis Services sent to CMHC even if not signed.
-- 11/28/2016	Sumana Sangapu		Check for CallCenterHeaderSystemCreatedOn and CallCenterHeaderSystemModifiedOn columns to be trigger 
-----------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [Synch].[usp_CMHCClientRecordedServices]
@BatchID BIGINT,
@LastRunDate DATETIME
AS
BEGIN

		CREATE TABLE #CMHCClientRecordedServices(
			[ServiceRecordingID] [bigint] NOT NULL,
			[ContactID] bigint NULL,
			[ContactTypeID] int NULL,
			[UserID] [nvarchar](100) NULL,
			[ServiceStartDate] [varchar](30) NULL,
			[ServiceStartTime] [nvarchar](5) NULL,
			[MRN] [varchar](8000) NULL,
			[CMHCCode] [nvarchar](50) NULL,
			[CMHCDescription] [nvarchar](50) NULL,
			[CMHCRU] [varchar](100) NULL,
			[Duration] [varchar](10) NULL,
			[ClientDuration] [varchar](10) NULL,
			[LOF] [int] NULL,
			[AttendanceCode] [smallint] NULL,
			[CMHCRecipientCode] [smallint] NULL,
			[LocationCode] [nvarchar](10) NULL,
			[PROJ] [int] NULL,
			[NoofAttendees] [int] NULL,
			[BatchID] [bigint] NULL,
			DocumentStatus [nvarchar](50) NULL,
			ServiceItemID INT NULL
		)

		/*  Assign following MRN based on ContactTypeID
		�	New � Contacttypeid = 13 � will have to be registered for MRN (this needs to be registered before completing service or else change to Anonymous in UI)
		�	Existing � ContacttypeID = 1 � Will have MRN generated by System
		�	Anonymous � ContactTypeid = 14 � Will have AnonymousAdult code associated  (CMHC = 099999999)
		�	AnonymousAdult � Contacttypeid = 11 � will have anonymousadult code associated  (CMHC = 099999999)
		�	AnonymousChild � Contacttypeid = 12 � will have anonymouschild code associated (CMHC = 088888888)
		*/
		
	   DECLARE @CrisisLineServiceID int,
			   @BenefitsAssistanceServiceID int

	   SELECT @CrisisLineServiceID = ServicesID FROM Reference.Services WHERE ServiceName = 'Crisis Services'
	   
	   SELECT @BenefitsAssistanceServiceID = ServicesID FROM Reference.Services WHERE ServiceName = 'Benefits Assistance'

	   --select @CrisisLineServiceID, @BenefitsAssistanceServiceID

	   INSERT INTO #CMHCClientRecordedServices
	   SELECT s.servicerecordingid,C.ContactID,C.ContactTypeID,
       UI.IDNumber AS UserID, --Staff
	   convert(nvarchar,cch.ServiceStartDate,101) as a,  -- Date
       LEFT(CONVERT(NVARCHAR(20), cch.ServiceStartDate, 108), 5) as ServiceStartTime, --Start
	   CASE WHEN C.ContactTypeID = 14 THEN '099999999' --Anonymous then associate AnonymousAdult code
			WHEN C.ContactTypeID = 11 THEN '099999999' --AnonymousAdult then associate AnonymousAdult code
			WHEN C.ContactTypeID = 12 THEN '088888888' --AnonymousChild then associate AnonymousChild code
	        WHEN C.ContactTypeID IN (1,13,15) THEN REPLICATE('0',9-LEN(RTRIM(C.MRN))) + RTRIM(C.MRN) END AS MRN,
       NULL as CMHCCode,--CMHC Service Code
	   NULL as CMHCDescription,
       pm.ProgramUnitIdentifierValue as CMHCRU, -- RU
	   CASE WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)= 2 THEN +CONVERT( varchar(5),(DATEDIFF(SECOND,s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)
			WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)= 1 THEN '0'+CONVERT( varchar(5),(DATEDIFF(SECOND,s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)
			ELSE CONVERT( varchar(5),(DATEDIFF(SECOND,s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24) END + ':' +
	   CASE WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60) = 2 THEN +CONVERT( varchar(5),(DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60)
			WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60) = 1 THEN '0'+CONVERT( varchar(5),(DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60)
		    ELSE CONVERT( varchar(5),(DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60) END as Duration,
	   CASE WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)= 2 THEN +CONVERT( varchar(5),(DATEDIFF(SECOND,s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)
			WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)= 1 THEN '0'+CONVERT( varchar(5),(DATEDIFF(SECOND,s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24)
			ELSE CONVERT( varchar(5),(DATEDIFF(SECOND,s.ServiceStartDate, s.ServiceEndDate) / 3600) % 24) END + ':' +
       CASE WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60) = 2 THEN +CONVERT( varchar(5),(DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60)
		    WHEN LEN((DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60) = 1 THEN '0'+CONVERT( varchar(5),(DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60)
		    ELSE CONVERT( varchar(5),(DATEDIFF(SECOND, s.ServiceStartDate, s.ServiceEndDate) / 60) % 60) END as ClientDuration,
       NULL as LOF,
	   ATS.LegacyCode as AttendanceCode, --ATT
       R.LegacyCode as CMHCRecipientCode, --RECIP
       CASE WHEN S.DeliveryMethodID = 1 THEN '7' 
			WHEN S.DeliveryMethodID = 2 THEN SL.LegacyCode 
			WHEN S.DeliveryMethodID = 3 THEN '8'  END as LocationCode, -- Loc Code
       NULL as PROJ, --PROJ
       NULL as NoofAttendees, -- No. of Recordees,
	   @BatchID,
	   -- Only for Crisis - Donot send over the service when there is no Signature (SignatureDate is NULL) and DocumentStatus = 'Completed' - Bug 16912
	   -- This fixes the issue of SenttoCMHCDate being populated when services for Crisis are not signed.
	   CASE
		WHEN cch.ServiceRecordingSourceID = 1 AND SignatureDate IS NULL AND DocumentStatus = 'Completed' THEN 'Pending'
		WHEN cch.ServiceRecordingSourceID = 1 AND SignatureDate IS NOT NULL AND DocumentStatus = 'Completed'  THEN 'Completed'
		ELSE DocumentStatus END AS DocumentStatus,
	   ServiceItemID
	   FROM Core.ServiceRecording S
       JOIN [Core].[vw_GetOrganizationStructureDetails] O
              ON S.OrganizationID = O.MappingID
       LEFT OUTER JOIN [Core].[vw_GetServiceRecordingDetails] cch
              ON S.ServiceRecordingID = CCH.ServiceRecordingID
       LEFT OUTER JOIN Registration.Contact C
              ON CCH.ContactID = C.ContactID
       LEFT OUTER JOIN Core.Users U
              ON S.UserID = U.UserID
	   LEFT OUTER JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY Userid ORDER BY ModifiedOn desc ) AS RN , Userid, IDNumber,ModifiedOn, SystemModifiedOn, SystemCreatedOn 
						FROM [Core].[UserIdentifierDetails] ui 
						WHERE ui.UserIdentifiertypeid = 1 ) ui
			  ON u.UserID = ui.UserID 
			  AND ui.RN = 1 
	   LEFT OUTER JOIN Core.ProgramUnitIdentifierMapping  pm
			  ON S.OrganizationID = pm.MappingID
			  AND pm.ProgramUnitIdentifierID = 5 --ReportingUnit
       LEFT OUTER JOIN Reference.RecipientCode R
              ON R.CodeID = S.RecipientCodeID 
       LEFT OUTER JOIN Reference.AttendanceStatus  ATS
              ON S.AttendanceStatusID = ATS.AttendanceStatusID
       LEFT OUTER JOIN Reference.ServiceLocation  SL
              ON S.ServiceLocationID = SL.ServiceLocationID
	   LEFT JOIN Reference.DeliveryMethod dm
			  ON S.DeliveryMethodID = dm.DeliveryMethodID
	   WHERE  C.ContactTypeID IN (1,11,12,13,14,15)
	   AND	cch.SentToCMHCDate IS NULL
	   AND ((S.[SystemCreatedOn] >=ISNULL(@LastRunDate,'') OR S.[SystemModifiedOn] >= ISNULL(@LastRunDate,'')) 
	   OR  (UI.[SystemCreatedOn] >=ISNULL(@LastRunDate,'') OR UI.[SystemModifiedOn] >= ISNULL(@LastRunDate,'')) 
	   OR  (CCH.[CallCenterHeaderSystemCreatedOn] >=ISNULL(@LastRunDate,'') OR cch.[CallCenterHeaderSystemModifiedOn] >= ISNULL(@LastRunDate,'')))

		-- Update the CMHCCode for ServiceItem = 172 (CrisisLine check for Status, as per the Mapping Document)
		UPDATE s
		SET CMHCCode = a.LegacyCode,
		    CMHCDescription = UPPER(a.LegacyCodeDescription),
			PROJ = a.ProjectCode
		FROM  #CMHCClientRecordedServices s 
		INNER JOIN 
		(Select csm.*,s.ServiceRecordingID,s.ServiceItemID FROM Reference.ServiceItemsLegacyMapping csm inner join Core.ServiceRecording s 
		ON ISNULL(S.ServiceItemID,'') = ISNULL(csm.ServiceID,'')  
		AND ISNULL(s.ServiceStatusID,'') = ISNULL(csm.ServiceStatusID,'')
		) a
		ON S.ServiceRecordingID = a.ServiceRecordingID
		WHERE a.ServiceItemID = @CrisisLineServiceID

		-- Update the CMHCCode for ServiceItem = 20 (BenefitsAssistance, as per the Mapping Document. Check for Trackingfield and ignore status if selected.)
		UPDATE s
		SET CMHCCode = a.LegacyCode,
		    CMHCDescription = UPPER(a.LegacyCodeDescription),
			PROJ = a.ProjectCode
		FROM #CMHCClientRecordedServices s 
		INNER JOIN 
		(Select csm.*,s.ServiceRecordingID,s.ServiceItemID FROM Reference.ServiceItemsLegacyMapping csm inner join Core.ServiceRecording s 
		ON ISNULL(S.ServiceItemID,'') = ISNULL(csm.ServiceID,'')  
		AND ISNULL(s.TrackingFieldID,'') = ISNULL(csm.TrackingFieldID,'')
		) a
		on S.ServiceRecordingID = a.ServiceRecordingID
		WHERE a.ServiceItemID = @BenefitsAssistanceServiceID


		-- Update the CMHCCode for ServiceItem <> 172 (Other than CrisisLine, as per the Mapping Document)
		UPDATE s
		SET CMHCCode = a.LegacyCode,
		    CMHCDescription = UPPER(a.LegacyCodeDescription),
			PROJ = a.ProjectCode
		FROM #CMHCClientRecordedServices s 
		INNER JOIN 
		(Select csm.*,s.ServiceRecordingID,s.ServiceItemID FROM Reference.ServiceItemsLegacyMapping csm inner join Core.ServiceRecording s 
		ON ISNULL(S.ServiceItemID,'') = ISNULL(csm.ServiceID,'')  
		) a
		on S.ServiceRecordingID = a.ServiceRecordingID
		WHERE a.ServiceItemID <> @CrisisLineServiceID 
		AND   a.ServiceItemID <> @BenefitsAssistanceServiceID

		-- Update the CMHCCode for ServiceItem = 20 (BenefitsAssistance, as per the Mapping Document. Check for Trackingfield and ignore status if selected.)
		UPDATE s
		SET CMHCCode = a.LegacyCode,
		    CMHCDescription = UPPER(a.LegacyCodeDescription),
			PROJ = a.ProjectCode
		FROM #CMHCClientRecordedServices s 
		INNER JOIN 
		(Select csm.*,s.ServiceRecordingID,s.ServiceItemID FROM Reference.ServiceItemsLegacyMapping csm inner join Core.ServiceRecording s 
		ON ISNULL(S.ServiceItemID,'') = ISNULL(csm.ServiceID,'')  
		AND ISNULL(s.TrackingFieldID,'') = ISNULL(csm.TrackingFieldID,'')
		) a
		on S.ServiceRecordingID = a.ServiceRecordingID
		WHERE a.ServiceItemID = @BenefitsAssistanceServiceID

		-----------------------------------------------------------------------------------------------------------------------------------------------
		TRUNCATE TABLE Synch.CMHCClientRecordedServices

		INSERT INTO Synch.CMHCClientRecordedServices
		-- For Crisis Services, Law Liaison Services, BAPN  & Financial Assessment and IDD Intake - Send when service is signed off after required notes are signed -the internal status for this condition is 'Complete'
		SELECT ServiceRecordingID, UserID, ServiceStartDate, ServiceStartTime, MRN, CMHCCode, CMHCDescription, CMHCRU, 
			   Duration, ClientDuration, LOF, AttendanceCode, CMHCRecipientCode, LocationCode, PROJ, NoofAttendees, BatchID, NULL as ErrorMessage
		FROM   #CMHCClientRecordedServices
		WHERE  DocumentStatus = 'Completed' 

		-- Get all the Additionalusers/Coproviders that exist with the Recorded Service. If the recorded service has a co-provider, send 2 services in the CMHC recorded service file.  
		-- The co-provider service would be exactly like the primary provider service – except that the staff ID provided should be for the co-provider and the project code field should equal ‘1’. 
		INSERT INTO Synch.CMHCClientRecordedServices
		SELECT ad.ServiceRecordingID, ui.IDNumber as UserID, ServiceStartDate, ServiceStartTime, MRN, CMHCCode, CMHCDescription, CMHCRU, 
			   Duration, ClientDuration, LOF, AttendanceCode, CMHCRecipientCode, LocationCode, 1 as PROJ, NoofAttendees, BatchID, NULL as ErrorMessage
		FROM   Synch.CMHCClientRecordedServices c
		INNER  JOIN Core.ServiceRecordingAdditionalUser ad
		ON	   c.ServiceRecordingID = ad.ServiceRecordingID AND ad.IsActive = 1 
		LEFT JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY Userid ORDER BY ModifiedOn desc ) AS RN , Userid, IDNumber,ModifiedOn, SystemModifiedOn, SystemCreatedOn 
					FROM [Core].[UserIdentifierDetails] ui 
					WHERE ui.UserIdentifiertypeid = 1 ) ui
	   	ON  ad.UserID = ui.UserID
  		AND UI.RN = 1 

		DROP TABLE #CMHCClientRecordedServices
 
END
